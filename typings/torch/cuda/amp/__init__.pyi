from __future__ import annotations

from contextlib import AbstractContextManager
from typing import Any

from ... import Tensor
from ...optim import Optimizer


class GradScaler:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def is_enabled(self) -> bool: ...
    def scale(self, loss: Tensor) -> Tensor: ...
    def step(self, optimizer: Optimizer) -> None: ...
    def update(self, new_scale: float | None = ...) -> None: ...
    def unscale_(self, optimizer: Optimizer) -> None: ...


def autocast(*args: Any, **kwargs: Any) -> AbstractContextManager[None]: ...

from __future__ import annotations

from typing import Any, Iterable, Mapping, Sequence, Tuple

class Module:
    training: bool
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
    def forward(self, *args: Any, **kwargs: Any) -> Any: ...
    def to(self, *args: Any, **kwargs: Any) -> Module: ...
    def eval(self) -> Module: ...
    def train(self, mode: bool = ...) -> Module: ...
    def parameters(self, *args: Any, **kwargs: Any) -> Iterable[Any]: ...
    def named_parameters(self, *args: Any, **kwargs: Any) -> Iterable[Tuple[str, Any]]: ...
    def state_dict(self, *args: Any, **kwargs: Any) -> Mapping[str, Any]: ...
    def load_state_dict(self, *args: Any, **kwargs: Any) -> Any: ...


class ModuleList(Module, Sequence[Module]):
    ...


class ModuleDict(Module, Mapping[str, Module]):
    ...


class Sequential(Module):
    def __init__(self, *modules: Module) -> None: ...


class Linear(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class Dropout(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class LayerNorm(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class Embedding(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class LSTM(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class GRU(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class BatchNorm1d(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class CrossEntropyLoss(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class BCEWithLogitsLoss(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class GELU(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class ReLU(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class SiLU(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class Tanh(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


class Softmax(Module):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...


def __getattr__(name: str) -> Any: ...

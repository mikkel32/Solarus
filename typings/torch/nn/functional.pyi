from __future__ import annotations

from typing import Any

from . import Tensor


def relu(input: Tensor, *args: Any, **kwargs: Any) -> Tensor: ...
def gelu(input: Tensor, *args: Any, **kwargs: Any) -> Tensor: ...
def silu(input: Tensor, *args: Any, **kwargs: Any) -> Tensor: ...
def tanh(input: Tensor, *args: Any, **kwargs: Any) -> Tensor: ...
def softmax(input: Tensor, dim: int, *args: Any, **kwargs: Any) -> Tensor: ...
def log_softmax(input: Tensor, dim: int, *args: Any, **kwargs: Any) -> Tensor: ...
def one_hot(input: Tensor, num_classes: int | None = ..., *args: Any, **kwargs: Any) -> Tensor: ...
def dropout(input: Tensor, *args: Any, **kwargs: Any) -> Tensor: ...
def layer_norm(input: Tensor, normalized_shape: Any, *args: Any, **kwargs: Any) -> Tensor: ...
def mse_loss(input: Tensor, target: Tensor, *args: Any, **kwargs: Any) -> Tensor: ...
def kl_div(input: Tensor, target: Tensor, *args: Any, **kwargs: Any) -> Tensor: ...
def cosine_similarity(x1: Tensor, x2: Tensor, *args: Any, **kwargs: Any) -> Tensor: ...
